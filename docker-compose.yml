services:
  frontend:
    container_name: task_manager_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_API_TIMEOUT=30000
      - CHOKIDAR_USEPOLLING=true  # Hot reload in Docker
    depends_on:
      - backend
    networks:
      - app-network
    stdin_open: true
    tty: true
    restart: unless-stopped

  # =====================================================
  # BACKEND SERVICE - Laravel API
  # =====================================================
  backend:
    container_name: task_manager_backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - backend_cache:/var/www/html/bootstrap/cache
    environment:
      - APP_NAME=TaskManager
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_URL=http://localhost:8000
      - APP_TIMEZONE=UTC

      # Database
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=task_manager
      - DB_USERNAME=task_user
      - DB_PASSWORD=secret_password

      # Redis
      - REDIS_HOST=redis
      - REDIS_PASSWORD=null
      - REDIS_PORT=6379
      - REDIS_CLIENT=phpredis

      # Cache & Session
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - SESSION_LIFETIME=120

      # JWT
      - JWT_SECRET=your-secret-key-here-change-in-production
      - JWT_TTL=60
      - JWT_REFRESH_TTL=20160

      # CORS
      - CORS_ALLOWED_ORIGINS=http://localhost:3000

      # Queue
      - QUEUE_CONNECTION=redis

    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "
        if [ ! -f /var/www/html/.initialized ]; then
          composer install --no-interaction &&
          php artisan key:generate --ansi &&
          php artisan migrate --force &&
          php artisan db:seed --force &&
          touch /var/www/html/.initialized
        fi &&
        php artisan serve --host=0.0.0.0 --port=8000
      "

  # =====================================================
  # DATABASE SERVICE - MySQL
  # =====================================================
  database:
    container_name: task_manager_db
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=task_manager
      - MYSQL_USER=task_user
      - MYSQL_PASSWORD=secret_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "task_user", "-psecret_password", "--silent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================================
  # REDIS SERVICE - Cache & Sessions
  # =====================================================
  redis:
    container_name: task_manager_redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================================
  # NGINX SERVICE - Reverse Proxy
  # =====================================================
  nginx:
    container_name: task_manager_nginx
    image: nginx:alpine
    ports:
      - "8888:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html  # For production build
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped
    # Available for both development and production

# =====================================================
# NETWORKS
# =====================================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================================
# VOLUMES - Persistent Data Storage
# =====================================================
volumes:
  mysql_data:
    driver: local
    name: task_manager_mysql_data

  redis_data:
    driver: local
    name: task_manager_redis_data

  backend_storage:
    driver: local
    name: task_manager_backend_storage

  backend_cache:
    driver: local
    name: task_manager_backend_cache